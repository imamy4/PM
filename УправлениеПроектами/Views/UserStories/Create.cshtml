@model УправлениеПроектами.Models.КлассыДляФормВвода.ТребованиеДляФормы

@{
    ViewBag.Title = "Создание требования";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container">
    <div class=" hero-unit" style="margin-top:45px">
        <h2>Создание проекта</h2>
        @using (Html.BeginForm("Create", "UserStories", FormMethod.Post, new { @class = "form-horizontal" }))
        {
            <fieldset>
                <div class="control-group" style="height: 50px">
                    <label class="control-label" for="IdПроект">
                        Выберете проект
                    </label>
                    <div class="controls">
                        @Html.ValidationMessage("IdПроект")
                        <div id="IdПроект-combobox"></div>
                        @Html.TextBox("IdПроект", Model.IdПроект, new { id = "IdПроект-textbox", style = "visibility: hidden;" })
                    </div>
                </div>
                <div class="control-group">
                    <label class="control-label" for="Название">
                        Введите наименование
                    </label>
                    <div class="controls">
                        @Html.ValidationMessage("Название")
                        @Html.TextBox("Название", Model.Название)
                    </div>
                </div>
                <div class="control-group">
                    <label class="control-label" for="Описание">
                        Введите описание
                    </label>
                    <div class="controls">
                        @Html.ValidationMessage("Описание")
                        @Html.TextArea("Описание", Model.Описание)
                    </div>
                </div>
                <div class="control-group">
                    <label class="control-label" for="Важность">
                        Введите важность
                    </label>
                    <div class="controls">
                        @Html.ValidationMessage("Важность")
                        @Html.TextBox("Важность", Model.Важность)
                    </div>
                </div>
                <div class="control-group">
                    <label class="control-label" for="Оценка">
                        Введите оценку
                    </label>
                    <div class="controls">
                        @Html.ValidationMessage("Оценка")
                        @Html.TextBox("Оценка", Model.Оценка)
                    </div>
                </div>
                <div class="control-group" style="height: 50px">
                    <label class="control-label" for="IdКатегория">
                        Выберете категорию
                    </label>
                    <div class="controls">
                        @Html.ValidationMessage("IdКатегория")
                        <div id="IdКатегория-combobox"></div>
                        @Html.TextBox("IdКатегория", Model.IdКатегория, new { id = "IdКатегория-textbox", style = "visibility: hidden" })
                    </div>
                </div>

                <div class="form-actions">
                    <button type="submit" class="btn btn-primary">
                        Содать новое требование
                    </button>
                    @Html.ActionLink("Отмена", "Index", "UserStories", null, new { @class = "btn" })
                </div>
            </fieldset>
        }
    </div>
</div>

@* Скрипт для содания combobox'ов в форме ввода *@

<script>
    Ext.onReady(function () {
        // combobox проектов
        var projectCombobox = Ext.create('Ext.form.field.ComboBox',
            {
                width: 206,
                height: 30,
                store: {
                    xtype: 'jsonstore',
                    autoLoad: true,
                    proxy: new Ext.data.HttpProxy({
                        url: 'GetProjects',
                        method: 'GET'
                    }),
                    fields:
                    [
                        'Id',   //числовое значение - номер элемента
                        'Name' //текст
                    ]
                },
                listeners: {
                    change: function (thisCombobox, newValue, oldValue) {
                        categoryCombobox.clearValue();
                        categoryCombobox.store.proxy.url = 'GetCategories?projectId=' + thisCombobox.getValue();
                        categoryCombobox.store.load();

                        var hiddenTextBox = Ext.get('IdПроект-textbox');
                        hiddenTextBox.set({ value: thisCombobox.getValue() });
                    }
                },
                valueField: 'Id',
                displayField: 'Name',
                queryMode: 'remote',
                typeAhead: true,
                typeAheadDelay: 10
            });

        // combobox категорий
        var categoryCombobox = Ext.create('Ext.form.field.ComboBox',
            {
                width: 206,
                height: 30,
                store: {
                    xtype: 'jsonstore',
                    autoLoad: true,
                    proxy: new Ext.data.HttpProxy({
                        url: 'GetCategories?projectId=' + projectCombobox.getValue(),
                        method: 'GET'
                    }),
                    fields:
                    [
                        'Id',   //числовое значение - номер элемента
                        'Name' //текст
                    ]
                },
                listeners: {
                    change: function (thisCombobox, newValue, oldValue) {
                        var hiddenTextBox = Ext.get('IdКатегория-textbox');
                        hiddenTextBox.set({ value: thisCombobox.getValue() });
                    }
                },
                valueField: 'Id',
                displayField: 'Name',
                queryMode: 'remote',
                typeAhead: true,
                typeAheadDelay: 100
            });


        Ext.create('Ext.Panel', {
            border: false,
            bodyStyle: 'background:transparent;',
            items: [
                projectCombobox
            ],
            renderTo: 'IdПроект-combobox'
        });

        Ext.create('Ext.Panel', {
            border: false,
            bodyStyle: 'background:transparent;',
            items: [
                categoryCombobox
            ],
            renderTo: 'IdКатегория-combobox'
        });
    });
</script>